plugins {
    id "jacoco"
    id "maven-publish"

    id "org.sonarqube" version "3.3"
    id "com.diffplug.spotless" version "6.12.0"
    id "io.micronaut.library" version "3.7.2"
}

repositories {
    mavenLocal()
    mavenCentral()
}

group = groupId
version = artifactVersion

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

micronaut {
    version("3.8.8")
    processing {
        incremental(true)
        module(project.name)
        group(project.group)
    }
}

dependencies {
    annotationProcessor "io.micronaut:micronaut-inject-java"
    compileOnly "io.micronaut:micronaut-inject-java"

    api "com.arangodb:arangodb-java-driver:7.0.0-RC.4"

    implementation "io.micronaut:micronaut-management"
    implementation "io.projectreactor:reactor-core"

//    implementation("org.apache.httpcomponents:httpclient:4.5.14") {
//        exclude group: "org.apache.httpcomponents", module: "httpclient"
//    }
//    implementation "commons-codec:commons-codec:1.15"

    testAnnotationProcessor "io.micronaut:micronaut-inject-java"

    testRuntimeOnly "ch.qos.logback:logback-classic:1.4.5"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testRuntimeOnly "com.arangodb:jackson-dataformat-velocypack:4.0.1"

    testImplementation "org.testcontainers:junit-jupiter:1.17.6"
    testImplementation "com.github.goodforgod:arangodb-testcontainer:2.0.0"

    testImplementation "io.micronaut.test:micronaut-test-core"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
}

test {
    failFast(true)
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
        exceptionFormat("full")
    }

    reports {
        html.enabled(false)
        junitXml.enabled(false)
    }
}

spotless {
    java {
        encoding("UTF-8")
        importOrder()
        removeUnusedImports()
        eclipse("4.21.0").configFile("${rootDir}/config/codestyle.xml")
    }
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "goodforgod"
        property "sonar.projectKey", "GoodforGod_$artifactId"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = "Micronaut ArangoDB Configuration"
                url = "https://github.com/GoodforGod/$artifactId"
                description = "This is integration between Micronaut and ArangoDB."

                license {
                    name = "Apache License 2.0"
                    url = "https://github.com/GoodforGod/$artifactId/blob/master/LICENSE"
                    distribution = "repo"
                }

                developer {
                    id = "GoodforGod"
                    name = "Anton Kurako"
                    email = "goodforgod.dev@gmail.com"
                    url = "https://github.com/GoodforGod"
                }

                scm {
                    connection = "scm:git:git://github.com/GoodforGod/${artifactId}.git"
                    developerConnection = "scm:git:ssh://GoodforGod/${artifactId}.git"
                    url = "https://github.com/GoodforGod/$artifactId/tree/master"
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username System.getenv("OSS_USERNAME")
                password System.getenv("OSS_PASSWORD")
            }
        }
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile) {
    options.encoding("UTF-8")
    options.incremental(true)
    options.fork = true
}

check.dependsOn jacocoTestReport
jacocoTestReport {
    reports {
        xml.enabled(true)
        html.outputLocation = layout.buildDirectory.dir("jacocoHtml")
    }
}

javadoc {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

if (project.hasProperty("signing.keyId")) {
    apply plugin: "signing"
    signing {
        sign publishing.publications.mavenJava
    }
}
